/**
 * This work is licensed under the 
 * Creative Commons Attribution-ShareAlike 4.0 International License. 
 * To view a copy of this license, visit 
 * http://creativecommons.org/licenses/by-sa/4.0/ 
 * or send a letter to 
 * Creative Commons, 
 * PO Box 1866, Mountain View, 
 * CA 94042, USA.
 */
/*
 * generated by Xtext 2.13.0
 */
package co.watly.ide.contentassist.antlr;

import co.watly.ide.contentassist.antlr.internal.InternalVaporParser;
import co.watly.services.VaporGrammarAccess;
import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class VaporParser extends AbstractContentAssistParser {

	@Inject
	private VaporGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalVaporParser createParser() {
		InternalVaporParser result = new InternalVaporParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
					put(grammarAccess.getCommandCommonAccess().getAlternatives(), "rule__CommandCommon__Alternatives");
					put(grammarAccess.getScheduledFlightAccess().getGroup(), "rule__ScheduledFlight__Group__0");
					put(grammarAccess.getScheduledFlightAccess().getGroup_17(), "rule__ScheduledFlight__Group_17__0");
					put(grammarAccess.getCommandUpAccess().getGroup(), "rule__CommandUp__Group__0");
					put(grammarAccess.getCommandDownAccess().getGroup(), "rule__CommandDown__Group__0");
					put(grammarAccess.getCommandLeftAccess().getGroup(), "rule__CommandLeft__Group__0");
					put(grammarAccess.getCommandRightAccess().getGroup(), "rule__CommandRight__Group__0");
					put(grammarAccess.getCommandForwardAccess().getGroup(), "rule__CommandForward__Group__0");
					put(grammarAccess.getCommandBackAccess().getGroup(), "rule__CommandBack__Group__0");
					put(grammarAccess.getCommandRotateAccess().getGroup(), "rule__CommandRotate__Group__0");
					put(grammarAccess.getDATEAccess().getGroup(), "rule__DATE__Group__0");
					put(grammarAccess.getDOUBLEAccess().getGroup(), "rule__DOUBLE__Group__0");
					put(grammarAccess.getDOUBLEAccess().getGroup_1(), "rule__DOUBLE__Group_1__0");
					put(grammarAccess.getScheduledFlightAccess().getDateAssignment_5(), "rule__ScheduledFlight__DateAssignment_5");
					put(grammarAccess.getScheduledFlightAccess().getModelAssignment_8(), "rule__ScheduledFlight__ModelAssignment_8");
					put(grammarAccess.getScheduledFlightAccess().getCostAssignment_11(), "rule__ScheduledFlight__CostAssignment_11");
					put(grammarAccess.getScheduledFlightAccess().getCommandsAssignment_16(), "rule__ScheduledFlight__CommandsAssignment_16");
					put(grammarAccess.getScheduledFlightAccess().getCommandsAssignment_17_1(), "rule__ScheduledFlight__CommandsAssignment_17_1");
					put(grammarAccess.getCommandUpAccess().getSpeedAssignment_2(), "rule__CommandUp__SpeedAssignment_2");
					put(grammarAccess.getCommandUpAccess().getMillisecsAssignment_5(), "rule__CommandUp__MillisecsAssignment_5");
					put(grammarAccess.getCommandDownAccess().getSpeedAssignment_2(), "rule__CommandDown__SpeedAssignment_2");
					put(grammarAccess.getCommandDownAccess().getMillisecsAssignment_5(), "rule__CommandDown__MillisecsAssignment_5");
					put(grammarAccess.getCommandLeftAccess().getSpeedAssignment_2(), "rule__CommandLeft__SpeedAssignment_2");
					put(grammarAccess.getCommandLeftAccess().getMillisecsAssignment_5(), "rule__CommandLeft__MillisecsAssignment_5");
					put(grammarAccess.getCommandRightAccess().getSpeedAssignment_2(), "rule__CommandRight__SpeedAssignment_2");
					put(grammarAccess.getCommandRightAccess().getMillisecsAssignment_5(), "rule__CommandRight__MillisecsAssignment_5");
					put(grammarAccess.getCommandForwardAccess().getSpeedAssignment_2(), "rule__CommandForward__SpeedAssignment_2");
					put(grammarAccess.getCommandForwardAccess().getMillisecsAssignment_5(), "rule__CommandForward__MillisecsAssignment_5");
					put(grammarAccess.getCommandBackAccess().getSpeedAssignment_2(), "rule__CommandBack__SpeedAssignment_2");
					put(grammarAccess.getCommandBackAccess().getMillisecsAssignment_5(), "rule__CommandBack__MillisecsAssignment_5");
					put(grammarAccess.getCommandRotateAccess().getSpeedAssignment_2(), "rule__CommandRotate__SpeedAssignment_2");
					put(grammarAccess.getCommandRotateAccess().getDegreesAssignment_4(), "rule__CommandRotate__DegreesAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public VaporGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(VaporGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
