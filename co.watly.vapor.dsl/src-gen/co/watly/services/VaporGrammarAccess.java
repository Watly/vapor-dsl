/**
 * This work is licensed under the 
 * Creative Commons Attribution-ShareAlike 4.0 International License. 
 * To view a copy of this license, visit 
 * http://creativecommons.org/licenses/by-sa/4.0/ 
 * or send a letter to 
 * Creative Commons, 
 * PO Box 1866, Mountain View, 
 * CA 94042, USA.
 */
/*
 * generated by Xtext 2.13.0
 */
package co.watly.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class VaporGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ScheduledFlightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.watly.Vapor.ScheduledFlight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScheduledKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cVaporKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFlightKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cDateKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDateDATEParserRuleCall_5_0 = (RuleCall)cDateAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cModelKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cModelAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cModelSTRINGTerminalRuleCall_8_0 = (RuleCall)cModelAssignment_8.eContents().get(0);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cCostKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cCostAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cCostLONGParserRuleCall_11_0 = (RuleCall)cCostAssignment_11.eContents().get(0);
		private final Keyword cDropsKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cCommaKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cCommandsKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cLeftSquareBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cCommandsAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cCommandsCommandParserRuleCall_16_0 = (RuleCall)cCommandsAssignment_16.eContents().get(0);
		private final Group cGroup_17 = (Group)cGroup.eContents().get(17);
		private final Keyword cCommaKeyword_17_0 = (Keyword)cGroup_17.eContents().get(0);
		private final Assignment cCommandsAssignment_17_1 = (Assignment)cGroup_17.eContents().get(1);
		private final RuleCall cCommandsCommandParserRuleCall_17_1_0 = (RuleCall)cCommandsAssignment_17_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Keyword cRightCurlyBracketKeyword_19 = (Keyword)cGroup.eContents().get(19);
		
		//ScheduledFlight:
		//	'scheduled' 'vapor' 'flight' '{'
		//	'date:' date=DATE ','
		//	'model:' model=STRING ','
		//	'cost:' cost=LONG 'drops' ','
		//	'commands:' '['
		//	commands+=Command (',' commands+=Command)*
		//	']'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'scheduled' 'vapor' 'flight' '{' 'date:' date=DATE ',' 'model:' model=STRING ',' 'cost:' cost=LONG 'drops' ','
		//'commands:' '[' commands+=Command (',' commands+=Command)* ']' '}'
		public Group getGroup() { return cGroup; }
		
		//'scheduled'
		public Keyword getScheduledKeyword_0() { return cScheduledKeyword_0; }
		
		//'vapor'
		public Keyword getVaporKeyword_1() { return cVaporKeyword_1; }
		
		//'flight'
		public Keyword getFlightKeyword_2() { return cFlightKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'date:'
		public Keyword getDateKeyword_4() { return cDateKeyword_4; }
		
		//date=DATE
		public Assignment getDateAssignment_5() { return cDateAssignment_5; }
		
		//DATE
		public RuleCall getDateDATEParserRuleCall_5_0() { return cDateDATEParserRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//'model:'
		public Keyword getModelKeyword_7() { return cModelKeyword_7; }
		
		//model=STRING
		public Assignment getModelAssignment_8() { return cModelAssignment_8; }
		
		//STRING
		public RuleCall getModelSTRINGTerminalRuleCall_8_0() { return cModelSTRINGTerminalRuleCall_8_0; }
		
		//','
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }
		
		//'cost:'
		public Keyword getCostKeyword_10() { return cCostKeyword_10; }
		
		//cost=LONG
		public Assignment getCostAssignment_11() { return cCostAssignment_11; }
		
		//LONG
		public RuleCall getCostLONGParserRuleCall_11_0() { return cCostLONGParserRuleCall_11_0; }
		
		//'drops'
		public Keyword getDropsKeyword_12() { return cDropsKeyword_12; }
		
		//','
		public Keyword getCommaKeyword_13() { return cCommaKeyword_13; }
		
		//'commands:'
		public Keyword getCommandsKeyword_14() { return cCommandsKeyword_14; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_15() { return cLeftSquareBracketKeyword_15; }
		
		//commands+=Command
		public Assignment getCommandsAssignment_16() { return cCommandsAssignment_16; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_16_0() { return cCommandsCommandParserRuleCall_16_0; }
		
		//(',' commands+=Command)*
		public Group getGroup_17() { return cGroup_17; }
		
		//','
		public Keyword getCommaKeyword_17_0() { return cCommaKeyword_17_0; }
		
		//commands+=Command
		public Assignment getCommandsAssignment_17_1() { return cCommandsAssignment_17_1; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_17_1_0() { return cCommandsCommandParserRuleCall_17_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_18() { return cRightSquareBracketKeyword_18; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_19() { return cRightCurlyBracketKeyword_19; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.watly.Vapor.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommandCommonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCommandRotateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Command:
		//	CommandCommon | CommandRotate;
		@Override public ParserRule getRule() { return rule; }
		
		//CommandCommon | CommandRotate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CommandCommon
		public RuleCall getCommandCommonParserRuleCall_0() { return cCommandCommonParserRuleCall_0; }
		
		//CommandRotate
		public RuleCall getCommandRotateParserRuleCall_1() { return cCommandRotateParserRuleCall_1; }
	}
	public class CommandCommonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.watly.Vapor.CommandCommon");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommandUpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCommandDownParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCommandLeftParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCommandRightParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCommandForwardParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCommandBackParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//CommandCommon:
		//	CommandUp | CommandDown | CommandLeft | CommandRight | CommandForward | CommandBack;
		@Override public ParserRule getRule() { return rule; }
		
		//CommandUp | CommandDown | CommandLeft | CommandRight | CommandForward | CommandBack
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CommandUp
		public RuleCall getCommandUpParserRuleCall_0() { return cCommandUpParserRuleCall_0; }
		
		//CommandDown
		public RuleCall getCommandDownParserRuleCall_1() { return cCommandDownParserRuleCall_1; }
		
		//CommandLeft
		public RuleCall getCommandLeftParserRuleCall_2() { return cCommandLeftParserRuleCall_2; }
		
		//CommandRight
		public RuleCall getCommandRightParserRuleCall_3() { return cCommandRightParserRuleCall_3; }
		
		//CommandForward
		public RuleCall getCommandForwardParserRuleCall_4() { return cCommandForwardParserRuleCall_4; }
		
		//CommandBack
		public RuleCall getCommandBackParserRuleCall_5() { return cCommandBackParserRuleCall_5; }
	}
	public class CommandUpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.watly.Vapor.CommandUp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSpeedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpeedINTTerminalRuleCall_2_0 = (RuleCall)cSpeedAssignment_2.eContents().get(0);
		private final Keyword cCmSecKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cForKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMillisecsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMillisecsINTTerminalRuleCall_5_0 = (RuleCall)cMillisecsAssignment_5.eContents().get(0);
		private final Keyword cMillisecondsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CommandUp:
		//	'up' 'at' speed=INT 'cm/sec' 'for' millisecs=INT 'milliseconds';
		@Override public ParserRule getRule() { return rule; }
		
		//'up' 'at' speed=INT 'cm/sec' 'for' millisecs=INT 'milliseconds'
		public Group getGroup() { return cGroup; }
		
		//'up'
		public Keyword getUpKeyword_0() { return cUpKeyword_0; }
		
		//'at'
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }
		
		//speed=INT
		public Assignment getSpeedAssignment_2() { return cSpeedAssignment_2; }
		
		//INT
		public RuleCall getSpeedINTTerminalRuleCall_2_0() { return cSpeedINTTerminalRuleCall_2_0; }
		
		//'cm/sec'
		public Keyword getCmSecKeyword_3() { return cCmSecKeyword_3; }
		
		//'for'
		public Keyword getForKeyword_4() { return cForKeyword_4; }
		
		//millisecs=INT
		public Assignment getMillisecsAssignment_5() { return cMillisecsAssignment_5; }
		
		//INT
		public RuleCall getMillisecsINTTerminalRuleCall_5_0() { return cMillisecsINTTerminalRuleCall_5_0; }
		
		//'milliseconds'
		public Keyword getMillisecondsKeyword_6() { return cMillisecondsKeyword_6; }
	}
	public class CommandDownElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.watly.Vapor.CommandDown");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDownKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSpeedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpeedINTTerminalRuleCall_2_0 = (RuleCall)cSpeedAssignment_2.eContents().get(0);
		private final Keyword cCmSecKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cForKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMillisecsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMillisecsINTTerminalRuleCall_5_0 = (RuleCall)cMillisecsAssignment_5.eContents().get(0);
		private final Keyword cMillisecondsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CommandDown:
		//	'down' 'at' speed=INT 'cm/sec' 'for' millisecs=INT 'milliseconds';
		@Override public ParserRule getRule() { return rule; }
		
		//'down' 'at' speed=INT 'cm/sec' 'for' millisecs=INT 'milliseconds'
		public Group getGroup() { return cGroup; }
		
		//'down'
		public Keyword getDownKeyword_0() { return cDownKeyword_0; }
		
		//'at'
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }
		
		//speed=INT
		public Assignment getSpeedAssignment_2() { return cSpeedAssignment_2; }
		
		//INT
		public RuleCall getSpeedINTTerminalRuleCall_2_0() { return cSpeedINTTerminalRuleCall_2_0; }
		
		//'cm/sec'
		public Keyword getCmSecKeyword_3() { return cCmSecKeyword_3; }
		
		//'for'
		public Keyword getForKeyword_4() { return cForKeyword_4; }
		
		//millisecs=INT
		public Assignment getMillisecsAssignment_5() { return cMillisecsAssignment_5; }
		
		//INT
		public RuleCall getMillisecsINTTerminalRuleCall_5_0() { return cMillisecsINTTerminalRuleCall_5_0; }
		
		//'milliseconds'
		public Keyword getMillisecondsKeyword_6() { return cMillisecondsKeyword_6; }
	}
	public class CommandLeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.watly.Vapor.CommandLeft");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSpeedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpeedINTTerminalRuleCall_2_0 = (RuleCall)cSpeedAssignment_2.eContents().get(0);
		private final Keyword cCmSecKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cForKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMillisecsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMillisecsINTTerminalRuleCall_5_0 = (RuleCall)cMillisecsAssignment_5.eContents().get(0);
		private final Keyword cMillisecondsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CommandLeft:
		//	'left' 'at' speed=INT 'cm/sec' 'for' millisecs=INT 'milliseconds';
		@Override public ParserRule getRule() { return rule; }
		
		//'left' 'at' speed=INT 'cm/sec' 'for' millisecs=INT 'milliseconds'
		public Group getGroup() { return cGroup; }
		
		//'left'
		public Keyword getLeftKeyword_0() { return cLeftKeyword_0; }
		
		//'at'
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }
		
		//speed=INT
		public Assignment getSpeedAssignment_2() { return cSpeedAssignment_2; }
		
		//INT
		public RuleCall getSpeedINTTerminalRuleCall_2_0() { return cSpeedINTTerminalRuleCall_2_0; }
		
		//'cm/sec'
		public Keyword getCmSecKeyword_3() { return cCmSecKeyword_3; }
		
		//'for'
		public Keyword getForKeyword_4() { return cForKeyword_4; }
		
		//millisecs=INT
		public Assignment getMillisecsAssignment_5() { return cMillisecsAssignment_5; }
		
		//INT
		public RuleCall getMillisecsINTTerminalRuleCall_5_0() { return cMillisecsINTTerminalRuleCall_5_0; }
		
		//'milliseconds'
		public Keyword getMillisecondsKeyword_6() { return cMillisecondsKeyword_6; }
	}
	public class CommandRightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.watly.Vapor.CommandRight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSpeedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpeedINTTerminalRuleCall_2_0 = (RuleCall)cSpeedAssignment_2.eContents().get(0);
		private final Keyword cCmSecKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cForKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMillisecsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMillisecsINTTerminalRuleCall_5_0 = (RuleCall)cMillisecsAssignment_5.eContents().get(0);
		private final Keyword cMillisecondsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CommandRight:
		//	'right' 'at' speed=INT 'cm/sec' 'for' millisecs=INT 'milliseconds';
		@Override public ParserRule getRule() { return rule; }
		
		//'right' 'at' speed=INT 'cm/sec' 'for' millisecs=INT 'milliseconds'
		public Group getGroup() { return cGroup; }
		
		//'right'
		public Keyword getRightKeyword_0() { return cRightKeyword_0; }
		
		//'at'
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }
		
		//speed=INT
		public Assignment getSpeedAssignment_2() { return cSpeedAssignment_2; }
		
		//INT
		public RuleCall getSpeedINTTerminalRuleCall_2_0() { return cSpeedINTTerminalRuleCall_2_0; }
		
		//'cm/sec'
		public Keyword getCmSecKeyword_3() { return cCmSecKeyword_3; }
		
		//'for'
		public Keyword getForKeyword_4() { return cForKeyword_4; }
		
		//millisecs=INT
		public Assignment getMillisecsAssignment_5() { return cMillisecsAssignment_5; }
		
		//INT
		public RuleCall getMillisecsINTTerminalRuleCall_5_0() { return cMillisecsINTTerminalRuleCall_5_0; }
		
		//'milliseconds'
		public Keyword getMillisecondsKeyword_6() { return cMillisecondsKeyword_6; }
	}
	public class CommandForwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.watly.Vapor.CommandForward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForwardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSpeedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpeedINTTerminalRuleCall_2_0 = (RuleCall)cSpeedAssignment_2.eContents().get(0);
		private final Keyword cCmSecKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cForKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMillisecsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMillisecsINTTerminalRuleCall_5_0 = (RuleCall)cMillisecsAssignment_5.eContents().get(0);
		private final Keyword cMillisecondsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CommandForward:
		//	'forward' 'at' speed=INT 'cm/sec' 'for' millisecs=INT 'milliseconds';
		@Override public ParserRule getRule() { return rule; }
		
		//'forward' 'at' speed=INT 'cm/sec' 'for' millisecs=INT 'milliseconds'
		public Group getGroup() { return cGroup; }
		
		//'forward'
		public Keyword getForwardKeyword_0() { return cForwardKeyword_0; }
		
		//'at'
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }
		
		//speed=INT
		public Assignment getSpeedAssignment_2() { return cSpeedAssignment_2; }
		
		//INT
		public RuleCall getSpeedINTTerminalRuleCall_2_0() { return cSpeedINTTerminalRuleCall_2_0; }
		
		//'cm/sec'
		public Keyword getCmSecKeyword_3() { return cCmSecKeyword_3; }
		
		//'for'
		public Keyword getForKeyword_4() { return cForKeyword_4; }
		
		//millisecs=INT
		public Assignment getMillisecsAssignment_5() { return cMillisecsAssignment_5; }
		
		//INT
		public RuleCall getMillisecsINTTerminalRuleCall_5_0() { return cMillisecsINTTerminalRuleCall_5_0; }
		
		//'milliseconds'
		public Keyword getMillisecondsKeyword_6() { return cMillisecondsKeyword_6; }
	}
	public class CommandBackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.watly.Vapor.CommandBack");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSpeedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpeedINTTerminalRuleCall_2_0 = (RuleCall)cSpeedAssignment_2.eContents().get(0);
		private final Keyword cCmSecKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cForKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMillisecsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMillisecsINTTerminalRuleCall_5_0 = (RuleCall)cMillisecsAssignment_5.eContents().get(0);
		private final Keyword cMillisecondsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CommandBack:
		//	'back' 'at' speed=INT 'cm/sec' 'for' millisecs=INT 'milliseconds';
		@Override public ParserRule getRule() { return rule; }
		
		//'back' 'at' speed=INT 'cm/sec' 'for' millisecs=INT 'milliseconds'
		public Group getGroup() { return cGroup; }
		
		//'back'
		public Keyword getBackKeyword_0() { return cBackKeyword_0; }
		
		//'at'
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }
		
		//speed=INT
		public Assignment getSpeedAssignment_2() { return cSpeedAssignment_2; }
		
		//INT
		public RuleCall getSpeedINTTerminalRuleCall_2_0() { return cSpeedINTTerminalRuleCall_2_0; }
		
		//'cm/sec'
		public Keyword getCmSecKeyword_3() { return cCmSecKeyword_3; }
		
		//'for'
		public Keyword getForKeyword_4() { return cForKeyword_4; }
		
		//millisecs=INT
		public Assignment getMillisecsAssignment_5() { return cMillisecsAssignment_5; }
		
		//INT
		public RuleCall getMillisecsINTTerminalRuleCall_5_0() { return cMillisecsINTTerminalRuleCall_5_0; }
		
		//'milliseconds'
		public Keyword getMillisecondsKeyword_6() { return cMillisecondsKeyword_6; }
	}
	public class CommandRotateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.watly.Vapor.CommandRotate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRotateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSpeedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpeedINTTerminalRuleCall_2_0 = (RuleCall)cSpeedAssignment_2.eContents().get(0);
		private final Keyword cCmSecKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDegreesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDegreesDOUBLEParserRuleCall_4_0 = (RuleCall)cDegreesAssignment_4.eContents().get(0);
		private final Keyword cDegreesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CommandRotate:
		//	'rotate' 'at' speed=INT 'cm/sec' degrees=DOUBLE 'degrees';
		@Override public ParserRule getRule() { return rule; }
		
		//'rotate' 'at' speed=INT 'cm/sec' degrees=DOUBLE 'degrees'
		public Group getGroup() { return cGroup; }
		
		//'rotate'
		public Keyword getRotateKeyword_0() { return cRotateKeyword_0; }
		
		//'at'
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }
		
		//speed=INT
		public Assignment getSpeedAssignment_2() { return cSpeedAssignment_2; }
		
		//INT
		public RuleCall getSpeedINTTerminalRuleCall_2_0() { return cSpeedINTTerminalRuleCall_2_0; }
		
		//'cm/sec'
		public Keyword getCmSecKeyword_3() { return cCmSecKeyword_3; }
		
		//degrees=DOUBLE
		public Assignment getDegreesAssignment_4() { return cDegreesAssignment_4; }
		
		//DOUBLE
		public RuleCall getDegreesDOUBLEParserRuleCall_4_0() { return cDegreesDOUBLEParserRuleCall_4_0; }
		
		//'degrees'
		public Keyword getDegreesKeyword_5() { return cDegreesKeyword_5; }
	}
	public class DATEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.watly.Vapor.DATE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cINTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cINTTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cColonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cINTTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//DATE ecore::EDate:
		//	INT '/' INT '/' INT INT ':' INT ':' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '/' INT '/' INT INT ':' INT ':' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//'/'
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4() { return cINTTerminalRuleCall_4; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_5() { return cINTTerminalRuleCall_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_7() { return cINTTerminalRuleCall_7; }
		
		//':'
		public Keyword getColonKeyword_8() { return cColonKeyword_8; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_9() { return cINTTerminalRuleCall_9; }
	}
	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.watly.Vapor.DOUBLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//DOUBLE ecore::EDouble:
		//	INT ('.' INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT)?
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//('.' INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	public class LONGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "co.watly.Vapor.LONG");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LONG ecore::ELong:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	
	
	private final ScheduledFlightElements pScheduledFlight;
	private final CommandElements pCommand;
	private final CommandCommonElements pCommandCommon;
	private final CommandUpElements pCommandUp;
	private final CommandDownElements pCommandDown;
	private final CommandLeftElements pCommandLeft;
	private final CommandRightElements pCommandRight;
	private final CommandForwardElements pCommandForward;
	private final CommandBackElements pCommandBack;
	private final CommandRotateElements pCommandRotate;
	private final DATEElements pDATE;
	private final DOUBLEElements pDOUBLE;
	private final LONGElements pLONG;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public VaporGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pScheduledFlight = new ScheduledFlightElements();
		this.pCommand = new CommandElements();
		this.pCommandCommon = new CommandCommonElements();
		this.pCommandUp = new CommandUpElements();
		this.pCommandDown = new CommandDownElements();
		this.pCommandLeft = new CommandLeftElements();
		this.pCommandRight = new CommandRightElements();
		this.pCommandForward = new CommandForwardElements();
		this.pCommandBack = new CommandBackElements();
		this.pCommandRotate = new CommandRotateElements();
		this.pDATE = new DATEElements();
		this.pDOUBLE = new DOUBLEElements();
		this.pLONG = new LONGElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("co.watly.Vapor".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ScheduledFlight:
	//	'scheduled' 'vapor' 'flight' '{'
	//	'date:' date=DATE ','
	//	'model:' model=STRING ','
	//	'cost:' cost=LONG 'drops' ','
	//	'commands:' '['
	//	commands+=Command (',' commands+=Command)*
	//	']'
	//	'}';
	public ScheduledFlightElements getScheduledFlightAccess() {
		return pScheduledFlight;
	}
	
	public ParserRule getScheduledFlightRule() {
		return getScheduledFlightAccess().getRule();
	}
	
	//Command:
	//	CommandCommon | CommandRotate;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//CommandCommon:
	//	CommandUp | CommandDown | CommandLeft | CommandRight | CommandForward | CommandBack;
	public CommandCommonElements getCommandCommonAccess() {
		return pCommandCommon;
	}
	
	public ParserRule getCommandCommonRule() {
		return getCommandCommonAccess().getRule();
	}
	
	//CommandUp:
	//	'up' 'at' speed=INT 'cm/sec' 'for' millisecs=INT 'milliseconds';
	public CommandUpElements getCommandUpAccess() {
		return pCommandUp;
	}
	
	public ParserRule getCommandUpRule() {
		return getCommandUpAccess().getRule();
	}
	
	//CommandDown:
	//	'down' 'at' speed=INT 'cm/sec' 'for' millisecs=INT 'milliseconds';
	public CommandDownElements getCommandDownAccess() {
		return pCommandDown;
	}
	
	public ParserRule getCommandDownRule() {
		return getCommandDownAccess().getRule();
	}
	
	//CommandLeft:
	//	'left' 'at' speed=INT 'cm/sec' 'for' millisecs=INT 'milliseconds';
	public CommandLeftElements getCommandLeftAccess() {
		return pCommandLeft;
	}
	
	public ParserRule getCommandLeftRule() {
		return getCommandLeftAccess().getRule();
	}
	
	//CommandRight:
	//	'right' 'at' speed=INT 'cm/sec' 'for' millisecs=INT 'milliseconds';
	public CommandRightElements getCommandRightAccess() {
		return pCommandRight;
	}
	
	public ParserRule getCommandRightRule() {
		return getCommandRightAccess().getRule();
	}
	
	//CommandForward:
	//	'forward' 'at' speed=INT 'cm/sec' 'for' millisecs=INT 'milliseconds';
	public CommandForwardElements getCommandForwardAccess() {
		return pCommandForward;
	}
	
	public ParserRule getCommandForwardRule() {
		return getCommandForwardAccess().getRule();
	}
	
	//CommandBack:
	//	'back' 'at' speed=INT 'cm/sec' 'for' millisecs=INT 'milliseconds';
	public CommandBackElements getCommandBackAccess() {
		return pCommandBack;
	}
	
	public ParserRule getCommandBackRule() {
		return getCommandBackAccess().getRule();
	}
	
	//CommandRotate:
	//	'rotate' 'at' speed=INT 'cm/sec' degrees=DOUBLE 'degrees';
	public CommandRotateElements getCommandRotateAccess() {
		return pCommandRotate;
	}
	
	public ParserRule getCommandRotateRule() {
		return getCommandRotateAccess().getRule();
	}
	
	//DATE ecore::EDate:
	//	INT '/' INT '/' INT INT ':' INT ':' INT;
	public DATEElements getDATEAccess() {
		return pDATE;
	}
	
	public ParserRule getDATERule() {
		return getDATEAccess().getRule();
	}
	
	//DOUBLE ecore::EDouble:
	//	INT ('.' INT)?;
	public DOUBLEElements getDOUBLEAccess() {
		return pDOUBLE;
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}
	
	//LONG ecore::ELong:
	//	INT;
	public LONGElements getLONGAccess() {
		return pLONG;
	}
	
	public ParserRule getLONGRule() {
		return getLONGAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
