/**
 * This work is licensed under the 
 * Creative Commons Attribution-ShareAlike 4.0 International License. 
 * To view a copy of this license, visit 
 * http://creativecommons.org/licenses/by-sa/4.0/ 
 * or send a letter to 
 * Creative Commons, 
 * PO Box 1866, Mountain View, 
 * CA 94042, USA.
 */
/**
 * generated by Xtext 2.13.0
 */
package co.watly.vapor.util;

import co.watly.vapor.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see co.watly.vapor.VaporPackage
 * @generated
 */
public class VaporAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static VaporPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VaporAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = VaporPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VaporSwitch<Adapter> modelSwitch =
    new VaporSwitch<Adapter>()
    {
      @Override
      public Adapter caseScheduledFlight(ScheduledFlight object)
      {
        return createScheduledFlightAdapter();
      }
      @Override
      public Adapter caseCommand(Command object)
      {
        return createCommandAdapter();
      }
      @Override
      public Adapter caseCommandCommon(CommandCommon object)
      {
        return createCommandCommonAdapter();
      }
      @Override
      public Adapter caseCommandUp(CommandUp object)
      {
        return createCommandUpAdapter();
      }
      @Override
      public Adapter caseCommandDown(CommandDown object)
      {
        return createCommandDownAdapter();
      }
      @Override
      public Adapter caseCommandLeft(CommandLeft object)
      {
        return createCommandLeftAdapter();
      }
      @Override
      public Adapter caseCommandRight(CommandRight object)
      {
        return createCommandRightAdapter();
      }
      @Override
      public Adapter caseCommandForward(CommandForward object)
      {
        return createCommandForwardAdapter();
      }
      @Override
      public Adapter caseCommandBack(CommandBack object)
      {
        return createCommandBackAdapter();
      }
      @Override
      public Adapter caseCommandRotate(CommandRotate object)
      {
        return createCommandRotateAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link co.watly.vapor.ScheduledFlight <em>Scheduled Flight</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.watly.vapor.ScheduledFlight
   * @generated
   */
  public Adapter createScheduledFlightAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.watly.vapor.Command <em>Command</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.watly.vapor.Command
   * @generated
   */
  public Adapter createCommandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.watly.vapor.CommandCommon <em>Command Common</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.watly.vapor.CommandCommon
   * @generated
   */
  public Adapter createCommandCommonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.watly.vapor.CommandUp <em>Command Up</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.watly.vapor.CommandUp
   * @generated
   */
  public Adapter createCommandUpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.watly.vapor.CommandDown <em>Command Down</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.watly.vapor.CommandDown
   * @generated
   */
  public Adapter createCommandDownAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.watly.vapor.CommandLeft <em>Command Left</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.watly.vapor.CommandLeft
   * @generated
   */
  public Adapter createCommandLeftAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.watly.vapor.CommandRight <em>Command Right</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.watly.vapor.CommandRight
   * @generated
   */
  public Adapter createCommandRightAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.watly.vapor.CommandForward <em>Command Forward</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.watly.vapor.CommandForward
   * @generated
   */
  public Adapter createCommandForwardAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.watly.vapor.CommandBack <em>Command Back</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.watly.vapor.CommandBack
   * @generated
   */
  public Adapter createCommandBackAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link co.watly.vapor.CommandRotate <em>Command Rotate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see co.watly.vapor.CommandRotate
   * @generated
   */
  public Adapter createCommandRotateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //VaporAdapterFactory
