/**
 * This work is licensed under the 
 * Creative Commons Attribution-ShareAlike 4.0 International License. 
 * To view a copy of this license, visit 
 * http://creativecommons.org/licenses/by-sa/4.0/ 
 * or send a letter to 
 * Creative Commons, 
 * PO Box 1866, Mountain View, 
 * CA 94042, USA.
 */
/**
 * generated by Xtext 2.13.0
 */
package co.watly.vapor.impl;

import co.watly.vapor.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class VaporFactoryImpl extends EFactoryImpl implements VaporFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static VaporFactory init()
  {
    try
    {
      VaporFactory theVaporFactory = (VaporFactory)EPackage.Registry.INSTANCE.getEFactory(VaporPackage.eNS_URI);
      if (theVaporFactory != null)
      {
        return theVaporFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new VaporFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VaporFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case VaporPackage.SCHEDULED_FLIGHT: return createScheduledFlight();
      case VaporPackage.COMMAND: return createCommand();
      case VaporPackage.COMMAND_COMMON: return createCommandCommon();
      case VaporPackage.COMMAND_UP: return createCommandUp();
      case VaporPackage.COMMAND_DOWN: return createCommandDown();
      case VaporPackage.COMMAND_LEFT: return createCommandLeft();
      case VaporPackage.COMMAND_RIGHT: return createCommandRight();
      case VaporPackage.COMMAND_FORWARD: return createCommandForward();
      case VaporPackage.COMMAND_BACK: return createCommandBack();
      case VaporPackage.COMMAND_ROTATE: return createCommandRotate();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ScheduledFlight createScheduledFlight()
  {
    ScheduledFlightImpl scheduledFlight = new ScheduledFlightImpl();
    return scheduledFlight;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Command createCommand()
  {
    CommandImpl command = new CommandImpl();
    return command;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CommandCommon createCommandCommon()
  {
    CommandCommonImpl commandCommon = new CommandCommonImpl();
    return commandCommon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CommandUp createCommandUp()
  {
    CommandUpImpl commandUp = new CommandUpImpl();
    return commandUp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CommandDown createCommandDown()
  {
    CommandDownImpl commandDown = new CommandDownImpl();
    return commandDown;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CommandLeft createCommandLeft()
  {
    CommandLeftImpl commandLeft = new CommandLeftImpl();
    return commandLeft;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CommandRight createCommandRight()
  {
    CommandRightImpl commandRight = new CommandRightImpl();
    return commandRight;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CommandForward createCommandForward()
  {
    CommandForwardImpl commandForward = new CommandForwardImpl();
    return commandForward;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CommandBack createCommandBack()
  {
    CommandBackImpl commandBack = new CommandBackImpl();
    return commandBack;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CommandRotate createCommandRotate()
  {
    CommandRotateImpl commandRotate = new CommandRotateImpl();
    return commandRotate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VaporPackage getVaporPackage()
  {
    return (VaporPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static VaporPackage getPackage()
  {
    return VaporPackage.eINSTANCE;
  }

} //VaporFactoryImpl
