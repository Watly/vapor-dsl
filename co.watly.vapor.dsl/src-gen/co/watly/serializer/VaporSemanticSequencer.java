/**
 * This work is licensed under the 
 * Creative Commons Attribution-ShareAlike 4.0 International License. 
 * To view a copy of this license, visit 
 * http://creativecommons.org/licenses/by-sa/4.0/ 
 * or send a letter to 
 * Creative Commons, 
 * PO Box 1866, Mountain View, 
 * CA 94042, USA.
 */
/*
 * generated by Xtext 2.13.0
 */
package co.watly.serializer;

import co.watly.services.VaporGrammarAccess;
import co.watly.vapor.CommandBack;
import co.watly.vapor.CommandDown;
import co.watly.vapor.CommandForward;
import co.watly.vapor.CommandLeft;
import co.watly.vapor.CommandRight;
import co.watly.vapor.CommandRotate;
import co.watly.vapor.CommandUp;
import co.watly.vapor.ScheduledFlight;
import co.watly.vapor.VaporPackage;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class VaporSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private VaporGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == VaporPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case VaporPackage.COMMAND_BACK:
				sequence_CommandBack(context, (CommandBack) semanticObject); 
				return; 
			case VaporPackage.COMMAND_DOWN:
				sequence_CommandDown(context, (CommandDown) semanticObject); 
				return; 
			case VaporPackage.COMMAND_FORWARD:
				sequence_CommandForward(context, (CommandForward) semanticObject); 
				return; 
			case VaporPackage.COMMAND_LEFT:
				sequence_CommandLeft(context, (CommandLeft) semanticObject); 
				return; 
			case VaporPackage.COMMAND_RIGHT:
				sequence_CommandRight(context, (CommandRight) semanticObject); 
				return; 
			case VaporPackage.COMMAND_ROTATE:
				sequence_CommandRotate(context, (CommandRotate) semanticObject); 
				return; 
			case VaporPackage.COMMAND_UP:
				sequence_CommandUp(context, (CommandUp) semanticObject); 
				return; 
			case VaporPackage.SCHEDULED_FLIGHT:
				sequence_ScheduledFlight(context, (ScheduledFlight) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Command returns CommandBack
	 *     CommandCommon returns CommandBack
	 *     CommandBack returns CommandBack
	 *
	 * Constraint:
	 *     (speed=INT millisecs=INT)
	 */
	protected void sequence_CommandBack(ISerializationContext context, CommandBack semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VaporPackage.Literals.COMMAND__SPEED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VaporPackage.Literals.COMMAND__SPEED));
			if (transientValues.isValueTransient(semanticObject, VaporPackage.Literals.COMMAND_COMMON__MILLISECS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VaporPackage.Literals.COMMAND_COMMON__MILLISECS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommandBackAccess().getSpeedINTTerminalRuleCall_2_0(), semanticObject.getSpeed());
		feeder.accept(grammarAccess.getCommandBackAccess().getMillisecsINTTerminalRuleCall_5_0(), semanticObject.getMillisecs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns CommandDown
	 *     CommandCommon returns CommandDown
	 *     CommandDown returns CommandDown
	 *
	 * Constraint:
	 *     (speed=INT millisecs=INT)
	 */
	protected void sequence_CommandDown(ISerializationContext context, CommandDown semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VaporPackage.Literals.COMMAND__SPEED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VaporPackage.Literals.COMMAND__SPEED));
			if (transientValues.isValueTransient(semanticObject, VaporPackage.Literals.COMMAND_COMMON__MILLISECS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VaporPackage.Literals.COMMAND_COMMON__MILLISECS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommandDownAccess().getSpeedINTTerminalRuleCall_2_0(), semanticObject.getSpeed());
		feeder.accept(grammarAccess.getCommandDownAccess().getMillisecsINTTerminalRuleCall_5_0(), semanticObject.getMillisecs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns CommandForward
	 *     CommandCommon returns CommandForward
	 *     CommandForward returns CommandForward
	 *
	 * Constraint:
	 *     (speed=INT millisecs=INT)
	 */
	protected void sequence_CommandForward(ISerializationContext context, CommandForward semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VaporPackage.Literals.COMMAND__SPEED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VaporPackage.Literals.COMMAND__SPEED));
			if (transientValues.isValueTransient(semanticObject, VaporPackage.Literals.COMMAND_COMMON__MILLISECS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VaporPackage.Literals.COMMAND_COMMON__MILLISECS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommandForwardAccess().getSpeedINTTerminalRuleCall_2_0(), semanticObject.getSpeed());
		feeder.accept(grammarAccess.getCommandForwardAccess().getMillisecsINTTerminalRuleCall_5_0(), semanticObject.getMillisecs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns CommandLeft
	 *     CommandCommon returns CommandLeft
	 *     CommandLeft returns CommandLeft
	 *
	 * Constraint:
	 *     (speed=INT millisecs=INT)
	 */
	protected void sequence_CommandLeft(ISerializationContext context, CommandLeft semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VaporPackage.Literals.COMMAND__SPEED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VaporPackage.Literals.COMMAND__SPEED));
			if (transientValues.isValueTransient(semanticObject, VaporPackage.Literals.COMMAND_COMMON__MILLISECS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VaporPackage.Literals.COMMAND_COMMON__MILLISECS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommandLeftAccess().getSpeedINTTerminalRuleCall_2_0(), semanticObject.getSpeed());
		feeder.accept(grammarAccess.getCommandLeftAccess().getMillisecsINTTerminalRuleCall_5_0(), semanticObject.getMillisecs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns CommandRight
	 *     CommandCommon returns CommandRight
	 *     CommandRight returns CommandRight
	 *
	 * Constraint:
	 *     (speed=INT millisecs=INT)
	 */
	protected void sequence_CommandRight(ISerializationContext context, CommandRight semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VaporPackage.Literals.COMMAND__SPEED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VaporPackage.Literals.COMMAND__SPEED));
			if (transientValues.isValueTransient(semanticObject, VaporPackage.Literals.COMMAND_COMMON__MILLISECS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VaporPackage.Literals.COMMAND_COMMON__MILLISECS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommandRightAccess().getSpeedINTTerminalRuleCall_2_0(), semanticObject.getSpeed());
		feeder.accept(grammarAccess.getCommandRightAccess().getMillisecsINTTerminalRuleCall_5_0(), semanticObject.getMillisecs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns CommandRotate
	 *     CommandRotate returns CommandRotate
	 *
	 * Constraint:
	 *     (speed=INT degrees=DOUBLE)
	 */
	protected void sequence_CommandRotate(ISerializationContext context, CommandRotate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VaporPackage.Literals.COMMAND__SPEED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VaporPackage.Literals.COMMAND__SPEED));
			if (transientValues.isValueTransient(semanticObject, VaporPackage.Literals.COMMAND_ROTATE__DEGREES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VaporPackage.Literals.COMMAND_ROTATE__DEGREES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommandRotateAccess().getSpeedINTTerminalRuleCall_2_0(), semanticObject.getSpeed());
		feeder.accept(grammarAccess.getCommandRotateAccess().getDegreesDOUBLEParserRuleCall_4_0(), semanticObject.getDegrees());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns CommandUp
	 *     CommandCommon returns CommandUp
	 *     CommandUp returns CommandUp
	 *
	 * Constraint:
	 *     (speed=INT millisecs=INT)
	 */
	protected void sequence_CommandUp(ISerializationContext context, CommandUp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VaporPackage.Literals.COMMAND__SPEED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VaporPackage.Literals.COMMAND__SPEED));
			if (transientValues.isValueTransient(semanticObject, VaporPackage.Literals.COMMAND_COMMON__MILLISECS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VaporPackage.Literals.COMMAND_COMMON__MILLISECS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommandUpAccess().getSpeedINTTerminalRuleCall_2_0(), semanticObject.getSpeed());
		feeder.accept(grammarAccess.getCommandUpAccess().getMillisecsINTTerminalRuleCall_5_0(), semanticObject.getMillisecs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ScheduledFlight returns ScheduledFlight
	 *
	 * Constraint:
	 *     (date=DATE model=STRING cost=LONG commands+=Command commands+=Command*)
	 */
	protected void sequence_ScheduledFlight(ISerializationContext context, ScheduledFlight semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
