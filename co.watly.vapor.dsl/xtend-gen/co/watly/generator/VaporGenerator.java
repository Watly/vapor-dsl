/**
 * This work is licensed under the 
 * Creative Commons Attribution-ShareAlike 4.0 International License. 
 * To view a copy of this license, visit 
 * http://creativecommons.org/licenses/by-sa/4.0/ 
 * or send a letter to 
 * Creative Commons, 
 * PO Box 1866, Mountain View, 
 * CA 94042, USA.
 */
/**
 * generated by Xtext 2.13.0
 */
package co.watly.generator;

import co.watly.vapor.Command;
import co.watly.vapor.CommandCommon;
import co.watly.vapor.CommandRotate;
import co.watly.vapor.ScheduledFlight;
import com.google.common.collect.Iterators;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class VaporGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    ScheduledFlight scheduledFlight = IteratorExtensions.<ScheduledFlight>toList(Iterators.<ScheduledFlight>filter(resource.getAllContents(), ScheduledFlight.class)).get(0);
    fsa.generateFile("commands.json", VaporGenerator.toJSON(scheduledFlight.getCommands()));
  }
  
  public static String consume(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    ScheduledFlight scheduledFlight = IteratorExtensions.<ScheduledFlight>toList(Iterators.<ScheduledFlight>filter(resource.getAllContents(), ScheduledFlight.class)).get(0);
    return VaporGenerator.toJSON(scheduledFlight.getCommands());
  }
  
  public static String toJSON(final EList<Command> commands) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("[");
    _builder.newLine();
    {
      for(final Command command : commands) {
        _builder.append("\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("\"name\": \"");
        String _replace = command.getClass().getSimpleName().toLowerCase().replace("command", "").replace("impl", "");
        _builder.append(_replace, "\t\t");
        _builder.append("\",");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("\"speed\": ");
        int _speed = command.getSpeed();
        _builder.append(_speed, "\t\t");
        _builder.append(",");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("\"arg\": ");
        CharSequence _thirdElementValue = VaporGenerator.thirdElementValue(command);
        _builder.append(_thirdElementValue, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        {
          Command _last = IterableExtensions.<Command>last(commands);
          boolean _tripleNotEquals = (command != _last);
          if (_tripleNotEquals) {
            _builder.append(",");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("]");
    return _builder.toString();
  }
  
  public static CharSequence thirdElementValue(final Command command) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((command instanceof CommandRotate)) {
        double _degrees = ((CommandRotate)command).getDegrees();
        _builder.append(_degrees);
      } else {
        int _millisecs = ((CommandCommon) command).getMillisecs();
        _builder.append(_millisecs);
      }
    }
    return _builder;
  }
}
