/**
 * This work is licensed under the 
 * Creative Commons Attribution-ShareAlike 4.0 International License. 
 * To view a copy of this license, visit 
 * http://creativecommons.org/licenses/by-sa/4.0/ 
 * or send a letter to 
 * Creative Commons, 
 * PO Box 1866, Mountain View, 
 * CA 94042, USA.
 */
/*
 * generated by Xtext 2.13.0
 */
package co.watly.generator

import co.watly.vapor.Command
import co.watly.vapor.CommandCommon
import co.watly.vapor.CommandRotate
import co.watly.vapor.ScheduledFlight
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class VaporGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var scheduledFlight = resource.allContents.filter(ScheduledFlight).toList.get(0)
		fsa.generateFile("commands.json", scheduledFlight.commands.toJSON)
	}

	def static consume(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var scheduledFlight = resource.allContents.filter(ScheduledFlight).toList.get(0)
		return scheduledFlight.commands.toJSON;
	}

	def static toJSON(EList<Command> commands) {
return '''[
	«FOR command : commands»
		{
			"name": "«command.class.simpleName.toLowerCase.replace("command", "").replace("impl", "")»",
			"speed": «command.speed»,
			"arg": «command.thirdElementValue»
		}«IF command !== commands.last»,«ENDIF»
	«ENDFOR»
]'''.toString
	}

	def static thirdElementValue(
		Command command) '''«IF command instanceof CommandRotate»«command.degrees»«ELSE»«(command as CommandCommon).millisecs»«ENDIF»'''
}
